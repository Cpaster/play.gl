import PlayGL from '../../src/core';
import * as mat4 from '../../src/math/mat4';

import vertexShader from './vertex.glsl';
import framentShader from './fragment.glsl';

const canvas = document.getElementById('page');

(async function() {

  const playGl = new PlayGL(canvas, {
    isWebGL2: true
  });

  // const gl = playGl.gl as WebGL2RenderingContext;

  const program = playGl.createProgram(framentShader, vertexShader);

  // const positions = [
  //   [-0.05, 0.05, 0], [0.05, -0.05, 0], [-0.05, -0.05, 0],
  //   [-0.05, 0.05, 0], [0.05, -0.05, 0], [0.05, 0.05, 0],
  // ];

  const models = [];
  for (let y = -8; y < 8; y += 2) {
    for (let x = -8; x < 8; x += 2) {
      const model = mat4.translate([], mat4.create(), [x / 10, y / 10, x / 10]);
      models.push(model);
    }
  }

  const positions = [
    [-0.05, -0.05, -0.05], [0.05, -0.05, -0.05], [0.05, 0.05, -0.05], [0.05, 0.05, -0.05], [-0.05, 0.05,-0.05], [-0.05, -0.05, -0.05],
    [-0.05, -0.05, 0.05], [0.05, -0.05, 0.05], [0.05, 0.05, 0.05], [0.05, 0.05, 0.05], [-0.05, 0.05,0.05], [-0.05, -0.05, 0.05],
    [-0.05, 0.05, 0.05], [-0.05, 0.05, -0.05], [-0.05, -0.05, -0.05], [-0.05, -0.05, -0.05], [-0.05, -0.05,0.05], [-0.05, 0.05, 0.05],
    [0.05, 0.05, 0.05], [0.05, 0.05, -0.05], [0.05, -0.05, -0.05], [0.05, -0.05, -0.05], [0.05, -0.05, 0.05], [0.05, 0.05, 0.05],
    [-0.05, -0.05, -0.05], [0.05, -0.05, -0.05], [0.05, -0.05, 0.05], [0.05, -0.05, 0.05], [-0.05, -0.05,0.05], [-0.05, -0.05, -0.05],
    [-0.05, 0.05, -0.05], [0.05, 0.05, -0.05], [0.05, 0.05, 0.05], [0.05, 0.05, 0.05], [-0.05, 0.05, 0.05], [-0.05, 0.05, -0.05]
  ];

  playGl.use(program);

  playGl.addMeshData({
    positions,
    instanceCount: models.length,
    attributes: {
      aColor: {
        data: [
          [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 1.0],
          [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 1.0],
          [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 1.0],
          [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 1.0],
          [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 1.0],
          [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 1.0],
        ]
      },
      aInstanceMatrix: {
        data: models,
        divisor: 1
      }
      // aOffset: {
      //   data: translations,
      //   divisor: 1
      // }
    }
  });

  playGl.render();
})();

